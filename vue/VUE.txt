1.[组件是可复用的Vue实例]
    所以组件与new Vue接收相同的选项，例如data、computed、watch、methods以及生命周期钩子等。仅有的例外是像el这样根实例特有的选项

2.组件的data必须是一个函数,该函数返回的对象就是data接收的对象

3.每个组件必须只有一个根元素
    这意味着如果你的模板内容如下：
    <h3>{{tittle}}</h3>
    <div v-html="content"></div>
    Vue是无法编译这个组件的

4.监听子组件中的事件
    通过Vue提供的自定义事件系统，父级组件可以像处理native DOM事件一样通过v-on监听子组件实例的任何事件：

    <parent-component>
        <child-component v-on:custom-event="parentMethod"/>
    </parent-component>
    父组件中的methods有一个parentMethod方法

    子组件的模板：
    templat ： "<h3>{{title}}<h3><button @click="$emit('custom-event')"></button>"

    此时点击子组件中的按钮，会触发父组件中的parentMethod方法。$emit还可以有第二个参数，可以用来传递值给父组件，但在组件模板中直接调用$emit时，this绑定的是windows对象，如果需要传递对象给父组件，可以通过在子组件的事件中调用$emit：
    Vue.component("child-component",{
        methods : {
            handleClick : function(){
                //do something
                this.$emit('custom-event',{});
            }
        },
        template : "<h3>{{title}}<h3><button @click="handleClick"></button>"
    });
    此时，在父组件中的parentMethod的第一个参数，可以接受到子组件传递的参数。父组件在模板内可以通过$event访问到传递的参数

5.在组件上使用v-model
    自定义事件可以用于创建支持v-model的自定义输入组件。记住：
    <input v-model="text"/>
    等价于
    <input :value="text" @input="text = $event.target.value"/>

    当v-model作用在组件上时：
    <custom-input 
        :value="text" 
        v-on:input="text = $event"
    ></custom-input>
    为了使得这个组件正常工作，这个组件内的input必须：
    · 将其value特性绑定到一个名叫value的prop上
    · 在其input事件被触发后，将新值通过自定义的input事件抛出
    Vue.component("custom-input",{
        props : ['value'],
        template : "<input v-on:input='$emit('input',$event.target.value)'/>"
    })

    也就是说：
        1.自定义组件必须有一个名为value的prop用来接收父组件传递的值 
        2.自定义组件在判定自己的值改变后(可能是input事件或scroll事件等)，需要通过$emit调用input(也可以在组件中定义自定义事件)事件并将新的值抛出

6.动态组件
    有的时候，在不同组件之间进行切换是很必要的，此时可以通过Vue的component元素加一个特殊的is特性来实现：
    <componnent :is="currentComponent"></component>
    此时可以通过currentComponent的值动态切换当前位置的组件。
    其中：currentComponnent可以包括：
        1.已注册的组件名称
        2.一个组件的选项对象

7.解析DOM模板时的注意事项
    部分HTML元素，如<ul> <ol> <table> <select>等，对于哪些元素可以出现在其内部时是有严格规定的。这会导致使用这些元素时碰到一些问题。如:
    <table>
        <custom-component></custom-component>
    </table>
    这个自定义的组件会被浏览器作为无效的内容提升到外部，此时Vue无法读取到模板内容（在HTML文件中）导致渲染出错。此时特殊的is特性给了一个变通的方法：
    <table>
        <tr is="custom-component"></tr>
    </table>
    此时tr标签会被Vue解析为custom-component

    注意，在以下来源使用模板的话，这条限制是不存在的：
    1. 字符串（例如：template : ''）
    2. 单文件组件（.vue）
    3. <script type="text/x-template"></script>

8.prop的大小写问题
    HTML中的属性名是大小写不敏感的，所以浏览器会把所有的大写字符解释为小写字符。这意味着你在DOM中使用模板时，使用camelCase（驼峰命名）的prop需要使用其等价的kebab-case(短横线分割命名)命名。

9.propc传递值
    1.布尔值
        <!--包含该prop但没有值的情况在内，意味着true-->
        <my-component is-published></mycomponent>

    2.数组
        <my-component ：comment-ids="[1,3,4]"></mycomponent>

    3.对象
        <my-component v-bind:author="{name : 'athor',company : 'Nike'}"></mycomponent>

    4.传入一个对象的所有属性
        如果需要将一个对象的所有属性都作为prop传入，可以使用不带参数的v-bind
        post : {
            id : 1,
            title : "My happy life"
        }
        <my-component v-bind="post"></mycomponent>
        等价于
        <my-component ：id="1" :title="My happy life"></mycomponent>

10.单向数据流
    所有的prop都使得其父子prop之间形成一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来不行。

    通常，有两种常见的试图改变一个prop的情形：
    1.这个prop用来传递一个初始值，这个子组件接下来希望将其作为一个本地的prop数据来用
        这种情况下，可以定义一个本地的data属性并将这个prop用作其初始值：
        props : ['initialCounter'],
        data : function(){
            return {
                counter : this.initialCounter
            }
        }
        PS：这个例子说明了组件的props属性在data属性之前初始化好了


    2.这个prop以一种原始值传入且需要进行转换。
        这种情况下，可以使用这个prop的值定义一个计算属性


    PS：对于数组或对象类型的prop来说，在子组件中改变这个对象或数本身终将会影响到父组件的状态。

11.Prop验证
    可以为组件的prop指定验证要求，例如你知道prop的类型。如果有一个需求没有被满足，Vue会在控制台中警告你。这在开发一个会被别人使用的组件时很有帮助。
    例：
    Vue.component('my-component',{
        props : {
            //基础的类型检查,null和undefinned会通过任何类型的验证
            propA : Number,
            //值可能有多个类型
            propB : [String,Number],
            //必填的字符串
            propC : {
                type : String
                required : true
            },
            //带有默认值的数字
            propD : {
                type : Number,
                default : 100
            }，
            //带有默认值的对象
            propE : {
                type : Object,
                defaultt : functton(){
                    return {message : 'hello'};
                }
            }，
            //自定义验证函数
            propF : {
                validator : function(value){
                    //这个值必须是下列字符串中的某一个
                    return ['success','fail','danger'].indexOf(value) != -1;
                }
            }
        }
    });
    prop验证失败时，（开发环境版本的）Vue将产生一个控制台警告，type可以是以下类型中的任意一个：

    String
    Number
    Boolean
    Array
    Object
    Date
    Function
    Symbol

    额外的，type还可以是一个自定义的构造函数。

    12.非Prop的特性
