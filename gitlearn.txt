1.创建版本库(又名仓库,repository)
   在一个合适的地方创建一一个目录,进入这个目录,使用
      git init
   把这个目录变成Git可以管理的仓库。
   git会在这个目录在生成一个.git的目录,这个目录是用来跟踪管理版本库的,千万不要修改它。

2.把文件添加到版本库
   文件一定要在仓库目录下(子目录也行)
   第一步 : 用命令git add告诉Git,将文件添加到仓库
      $ git add README.md
   第二步 : 用命令git commit告诉Git,把文件提交到仓库
      $ git commit -m "my first commit"
      -m后面的输入是本次提交的说明
   git commit执行成功后,会返回几个文件被改动以及插入了几行内容的信息。

3.版本回退
   在Git中,HEAD表示当前版本,上一个版本是HEAD^,上上一个版本是HEAD^^,第一百个为HEAD^^^...,可以写成HEAD~100
   将当前版本回退到上一个版本
      $ git reset --hard HEAD^
   
   假如你后悔了,想要回到之前最新的版本,可以查找到最新版本的commit id,然后
      $ git reset --hard 351ab    ps : 351ab为最新版本的commit id前面几位(只要能确定唯一一个commit id即可),

4.工作区和版本库
   1)工作区
      一个目录,你使用了git init初始化的目录可以叫做工作区


   2)版本库:
      工作区有一个隐藏目录.git,这个就是Git的版本库
      版本库中存了很多东西,其中最重要的就是称为stage(或者叫做index)的暂存区,还有Git为我们创建的第一个分支Master,以及指向master的一个指针叫HEAD

      I:在使用git add时,实际上就是把文件修改(新增文件、修改文件都算文件修改)添加到暂存区(stage)。

5.管理修改
   git跟踪并管理的是修改,而非文件。(新增行、修改行、添加文件、删除文件等都是修改)

   
6.撤销修改
   git checkout -- filename 可以撤销工作区的修改,让这个文件回到最近一次git commit或git add时的状态
   有两种情况:
      1.文件自修改后还没有被放到暂存区,此时撤销就回到和版本库一模一样的状态
      2.文件已经添加到了暂存区,又作了修改,此时撤销就回到添加到暂存区后的状态

   假定你在文件上写了一堆胡话,并且add到了暂存区,使用
      git reset HEAD filename 
   将暂存区的修改回退到工作区。此时再使用git checkout -- filename即可丢弃修改

7.删除文件
   在Git中,删除也是一个修改操作。如果你在工作区中删除了一个文件(使用文件系统删除额)，可以使用
      git rm filename 或
      git add filename 将删除操作提交到暂存区.
   然后使用
      git commit -m "comment" 提交修改

   假如你误删除了(从文件系统),可以直接使用
      git checkout -- filename从版本库中还原

   假如你误删了文件并提交到了暂存区,可以使用
      git reset HEAD filename 
   将暂存区的修改退回到工作区,然后使用
      git checkout -- filename从版本库中还原

8.远程仓库
   关联一个远程仓库



命令补充:
   git log => 查看历史记录
   git reflog => 记录了你操作的每一次命令,可以用来查看commit id


总结:
   一、Git跟踪并管理的是【修改】，而非文件

   二、Git工作流程
      1）初始化工作区(git init)

      2）修改文件
         新建、删除、修改文件内容等操作都是【修改】操作

      3）将修改提交到暂存区(git add)

      4）提交到版本库(git commit)

   三、Git核心操作
