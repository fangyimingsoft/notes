1.创建版本库(又名仓库,repository)
   在一个合适的地方创建一一个目录,进入这个目录,使用
      git init
   把这个目录变成Git可以管理的仓库。
   git会在这个目录在生成一个.git的目录,这个目录是用来跟踪管理版本库的,千万不要修改它。

2.把文件添加到版本库
   文件一定要在仓库目录下(子目录也行)
   第一步 : 用命令git add告诉Git,将文件添加到仓库
      $ git add README.md
   第二步 : 用命令git commit告诉Git,把文件提交到仓库
      $ git commit -m "my first commit"
      -m后面的输入是本次提交的说明
   git commit执行成功后,会返回几个文件被改动以及插入了几行内容的信息。

3.版本回退
   在Git中,HEAD表示当前版本,上一个版本是HEAD^,上上一个版本是HEAD^^,第一百个为HEAD^^^...,可以写成HEAD~100
   将当前版本回退到上一个版本
      $ git reset --hard HEAD^
   
   假如你后悔了,想要回到之前最新的版本,可以查找到最新版本的commit id,然后
      $ git reset --hard 351ab    ps : 351ab为最新版本的commit id前面几位(只要能确定唯一一个commit id即可),

4.工作区和版本库
   1)工作区
      一个目录,你使用了git init初始化的目录可以叫做工作区


   2)版本库:
      工作区有一个隐藏目录.git,这个就是Git的版本库
      版本库中存了很多东西,其中最重要的就是称为stage(或者叫做index)的暂存区,还有Git为我们创建的第一个分支Master,以及指向master的一个指针叫HEAD

      I:在使用git add时,实际上就是把文件修改(新增文件、修改文件都算文件修改)添加到暂存区(stage)。

5.管理修改
   git跟踪并管理的是修改,而非文件。(新增行、修改行、添加文件、删除文件等都是修改)

   
6.撤销修改
   git checkout -- filename 可以撤销工作区的修改,让这个文件回到最近一次git commit或git add时的状态
   有两种情况:
      1.文件自修改后还没有被放到暂存区,此时撤销就回到和版本库一模一样的状态
      2.文件已经添加到了暂存区,又作了修改,此时撤销就回到添加到暂存区后的状态

   假定你在文件上写了一堆胡话,并且add到了暂存区,使用
      git reset HEAD filename 
   将暂存区的修改回退到工作区。此时再使用git checkout -- filename即可丢弃修改

7.删除文件
   在Git中,删除也是一个修改操作。如果你在工作区中删除了一个文件(使用文件系统删除额)，可以使用
      git rm filename 或
      git add filename 将删除操作提交到暂存区.
   然后使用
      git commit -m "comment" 提交修改

   假如你误删除了(从文件系统),可以直接使用
      git checkout -- filename从版本库中还原

   假如你误删了文件并提交到了暂存区,可以使用
      git reset HEAD filename 
   将暂存区的修改退回到工作区,然后使用
      git checkout -- filename从版本库中还原

8.远程仓库
   关联一个远程仓库
      git remote add origin git@github.com:fangyimingsoft/learngit.git
   关联后,使用命令
      git push -u origin master第一次推送master分支的所有内容
   此后,每次本地提交后,使用
      git push origin master推送新更改

   从远程仓库克隆
      git clone git@github.com/fangyiming/notes.git
   git会在当前位置新建一个名为notes的工作区。

9.分支管理
   1.创建与合并分支
      创建分支
         git branch branch_name
      切换到新分支
         git checkout branch_name
      上面两条语句也可以合并成一条
         git checkout -b branch_name
      使用
         git branch 查看当前分支

      切换分支
         git checkout branch_name
      合并某分支到当前分支
         git merge branch_name
      删除分支
         git branch -d branch_name

   2.解决冲突
      Git无法自动合并时,必须手动解决冲突后,再提交,此时合并完成。

   3.分支管理策略
      通常,合并分支时,如果可以,Git会使用Fast Forward模式,这种模式下,删除分支信息后,会丢掉分支信息。
      使用Fast Forward模式时,merge时就像这样:
                                             HEAD        
                                                ↘        
               master                             master          
                  ↓                                 ↓ 
      ○-----○-----○-----○    ->   ○-----○-----○-----○ 
                        ↑                           ↑
                       dev                         dev 
                      ↗
                    HEAD

      不使用Fast forward模式,merge时像这样:
                                             HEAD        
                                                ↘        
               master                             master          
                  ↓                                 ↓ 
      ○-----○-----○-----○    ->   ○-----○-----○-----○ 
                        ↑                      ＼ ／   
                       dev                       ○ 
                      ↗                         dev
                    HEAD      

      禁用Fast forward模式合并dev分支:
         git merge --no-ff -m "merge with no-ff" dev
      因为此次合并要创建一个新的commit,所以加上-m参数,把commit的备注写入。

   4.bug分支
      比如有个代号101的bug任务时,很自然的你想创建一个issue_101的分支来修复它,但是当前dev上进行的工作还没有提交,此时你的工作还没完成,还没发提交,预计还需要2天时间。但2小时内你得修复这个BUG。
      Git提供了
         git stash
      这个命令可以把当前工作现场(工作区的修改以及暂存区数据)存储起来,等以后恢复现场后继续工作

      查看已保存的工作现场
         git stash list

      恢复工作现场,有两种方式
         1.使用
             git stash apply
           恢复,恢复后stash的内容没有删除,需要使用
             git stash drop
           进行删除

         2.使用
            git stash pop
           该命令在恢复的同时会把stash的内容删除

      你可以多次进行git stash操作,恢复时,先使用git stash list查看,然后恢复指定的stash
         git stash apply stash@{0}



   5.Feature分支
      开发一个新feature(特征、功能)，最好新建一个分支;
      如果要丢弃一个没有被合并过的分支,可以通过
         git branch -D <name>
      进行强行删除

   6.多人协作
      当从远程仓库克隆时,Git自动把本地的master分支和远程的master分支对应起来了,并且,远程仓库的默认名称为origin

      查看远程仓库的信息,用
         git remote
      或者,使用
         git remote -v 显示详细的信息

      ● 推送分支
         把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样Git就会把该分支推送到远程库对应的远程分支上：
            git push origin master
         如果要推送其他分支到远程仓库,比如dev :
            git push origin dev

      ● 抓取分支
         多人协作时,大家都会往master和dev分支上推送各自的修改,现在有你有一个小伙伴,从远程库clone下整个库:
            git clone git@github.com:fangyimingsoft/learngit.git

         默认情况下,你的小伙伴只能看到本地的master分支,可以使用git branch看看。现在你的小伙伴需要在dev上开发，此时必须创建远程origin的dev分支到本地,于是他用这个命令创建本地dev分支:
            git checkout -b dev origin/dev
         现在,他就可以在dev上继续修改,然后时不时将dev分支push到远程:
            git push origin dev

         你的小伙伴已经向origin/dev分支推送了他的提交,碰巧你也对同样的文件作了修改,并试图推送。此时推送失败，Git提示使用
            git pull
            (
               此时git pull可能失败(如果pull的是非master分支),原因是没有指定本地分支dev与远程origin/dev分支的链接:
                  git branch --set-upstream-to=origin/dev dev

            )
         把最新的提交从origin/master抓下来,然后在本地合并,解决冲突,再推送:
            git push origin master


   7.rebase
      略
      13437116968 

10.标签管理
   标签总是和commit挂钩,可以将标签看做指向一个commit的指针
   1.创建标签
         git tag <tagname>
      默认标签是打在最新提交的commit上的。如果需要给以前的提交打标签，可以使用
         git tag <tagname> <commit id>
      可以创建带有说明的标签,用-a指定标签名,-m指定说明文字:
         git tag -a v1.0 -m 'version 1.0 update' [<commit id>]

   2.查看标签
         git tag
      标签不是按照时间排序,是按照字母顺序排序的,使用
         git show <tagname>
      可以看到说明文字。

   3.删除标签
         git tag -d v0.1
      如果要推送某个标签到远程,使用:
         git push origin <tagname>
      或一次性推送全部未推送的本地标签到远程:
         git push origin --tags

      如果标签已经推送到远程,要删除远程标签。先从本地删除：
         git tag -d <tagname>
      然后,从远程删除,删除命令也是push,格式如下:
         git push origin :refs/tags/<tagname>


11.自定义Git
   1.gitignore
      有些时候,你必须把某些文件放到Git目录中,但又不能提交他们,比如数据库密码配置文件。此时可以使用.gitignore,把要忽略的文件名称填进去,Git就会自动忽略这些文件。例：
         #Java
         *.class
         *.jar
         jdbc.properties
      然后将.gitignore也提交到Git,就完成了。

   2.配置别名
      可以将命令取别名使用，如
         git config --global alias st status
      此时st表示status,--global是全局参数,就是说这些命令在这台电脑的所有Git仓库下都有用.

   3.配置文件位置
      每个仓库的Git配置文件都放在.git/config文件中。

      当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中。






命令补充:
   git log => 查看历史记录
   git log --graph => 查看分支合并图
   git log -[i] => 显示最后i次提交信息
   git log --pretty=oneline --abbrev-commit => 查看历史记录  每条占一行
   git reflog => 记录了你操作的每一次命令,可以用来查看commit id



总结:
   一、Git跟踪并管理的是【修改】，而非文件

   二、Git工作流程
      1）初始化工作区(git init)

      2）修改文件
         新建、删除、修改文件内容等操作都是【修改】操作

      3）将修改提交到暂存区(git add)

      4）提交到版本库(git commit)

   三、Git核心操作
